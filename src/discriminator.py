from torch import nn

class Discriminator(nn.Module):
    """
        This class implements a discriminator model that takes an image as input 
        and outputs a single probability indicating whether the input image is real (from the dataset)
        or fake (generated by the generator).

        The discriminator consists of several layers of convolutions, each followed by an instance normalization 
        (which normalizes the features across each feature map independently, improving the model's stability) 
        and a LeakyReLU activation function. The last layer uses a Sigmoid activation function to output 
        a probability in the range [0, 1].

        Attributes:
            disc (torch.nn.Module): The sequential container of all the layers in the discriminator.

        Args:
            channels_img (int): The number of input channels, typically 3 for RGB images.
            features_d (int): The size (number of nodes or filters) of the initial layer in the discriminator.
    """
    def __init__(self, channels_img, features_d):
        super(Discriminator, self).__init__()
        self.disc = nn.Sequential(
            # Input: N x channels_img x 64 x 64
            nn.Conv2d(channels_img, features_d, kernel_size=4, stride=2, padding=1),  
            nn.LeakyReLU(0.2),
            self.discriminator_block(features_d, features_d * 2, 4, 2, 1),  
            self.discriminator_block(features_d * 2, features_d * 4, 4, 2, 1),  
            self.discriminator_block(features_d * 4, features_d * 8, 4, 2, 1), 
            # Output: N x 1 x 1 x 1
            nn.Conv2d(features_d * 8, 1, kernel_size=4, stride=2, padding=0),
             nn.Sigmoid(),
        )

    def discriminator_block(self, in_channels, out_channels, kernel_size, stride, padding):
        return nn.Sequential(
            nn.Conv2d(
                in_channels,
                out_channels,
                kernel_size,
                stride,
                padding,
                bias=False,
            ),
            nn.BatchNorm2d(out_channels),
            nn.LeakyReLU(0.2),
        )

    def forward(self, x):
        return self.disc(x)
